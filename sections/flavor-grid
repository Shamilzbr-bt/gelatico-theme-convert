{% comment %}
  Flavor Grid Section
  ------------------------------
  A grid of product cards with filtering and search capability
  
  Adapted from React component to Shopify Liquid template
{% endcomment %}

{{ 'section-flavor-grid.css' | asset_url | stylesheet_tag }}
<script src="{{ 'section-flavor-grid.js' | asset_url }}" defer="defer"></script>

<div class="flavor-grid-section w-full" data-flavor-grid>
  {%- if section.settings.featured == false -%}
    <div class="filter-container mb-8 flex flex-col sm:flex-row gap-4">
      <!-- Search Bar -->
      <div class="relative flex-1">
        <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="11" cy="11" r="8"></circle>
          <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
        </svg>
        <input
          type="text"
          placeholder="{{ section.settings.search_placeholder }}"
          class="search-input"
          data-search-input
        />
      </div>
      
      <!-- Filter Button -->
      <div class="flex items-center space-x-2">
        <button class="filter-button" data-filter-toggle>
          <svg class="filter-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>
          </svg>
          {{ section.settings.filter_button_text }}
          <span class="filter-count hidden" data-filter-count></span>
        </button>
        
        <!-- Filter Dropdown -->
        <div class="filter-dropdown hidden" data-filter-dropdown>
          <div class="filter-dropdown-header">{{ section.settings.filter_dropdown_title }}</div>
          <div class="filter-dropdown-separator"></div>
          <div class="filter-options" data-filter-options>
            {%- assign all_tags = blank -%}
            {%- for product in collections[section.settings.collection].products -%}
              {%- for tag in product.tags -%}
                {%- assign tag_handle = tag | handleize -%}
                {%- if tag_handle contains section.settings.tag_prefix -%}
                  {%- capture clean_tag -%}{{ tag | remove_first: section.settings.tag_prefix }}{%- endcapture -%}
                  {%- unless all_tags contains clean_tag -%}
                    {%- capture all_tags -%}{{ all_tags | append: clean_tag | append: ',' }}{%- endcapture -%}
                  {%- endunless -%}
                {%- endif -%}
              {%- endfor -%}
            {%- endfor -%}
            
            {%- assign tag_array = all_tags | split: ',' | sort -%}
            {%- for tag in tag_array -%}
              {%- unless tag == blank -%}
                <div class="filter-checkbox-item" data-tag="{{ tag }}">
                  <label class="filter-checkbox-label">
                    <input type="checkbox" class="filter-checkbox" data-filter-checkbox value="{{ tag }}">
                    <span>{{ tag }}</span>
                  </label>
                </div>
              {%- endunless -%}
            {%- endfor -%}
          </div>
          
          <div class="filter-dropdown-separator"></div>
          <button class="clear-filters-button" data-clear-filters>
            {{ section.settings.clear_filters_text }}
          </button>
        </div>
      </div>
    </div>
  {%- endif -%}
  
  <!-- Products Grid -->
  <div class="{% if section.settings.featured %}featured-layout space-y-6{% else %}grid-layout{% endif %}" data-products-container>
    {%- for product in collections[section.settings.collection].products limit: section.settings.products_limit -%}
      {%- liquid
        assign product_tags = ''
        for tag in product.tags
          if tag contains section.settings.tag_prefix
            capture clean_tag
              echo tag | remove_first: section.settings.tag_prefix
            endcapture
            assign product_tags = product_tags | append: clean_tag | append: ','
          endif
        endfor
        assign product_tags = product_tags | split: ',' | join: ','
      -%}
      
      <div 
        class="flavor-card-container" 
        data-product-card 
        data-product-tags="{{ product_tags }}"
        data-product-title="{{ product.title | downcase }}"
        data-product-description="{{ product.description | strip_html | downcase }}"
      >
        {% render 'flavor-card', 
          product: product,
          layout: section.settings.featured,
          show_buttons: section.settings.show_buttons
        %}
      </div>
    {%- else -%}
      <div class="no-results hidden" data-no-results>
        <h3 class="text-2xl font-heading mb-4">{{ section.settings.no_results_heading }}</h3>
        <p class="text-body-muted mb-6">{{ section.settings.no_results_text }}</p>
        <button class="clear-filters-button" data-clear-filters-alt>{{ section.settings.clear_filters_text }}</button>
      </div>
    {%- endfor -%}
  </div>
</div>

{% schema %}
{
  "name": "Flavor Grid",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection",
      "default": "all"
    },
    {
      "type": "range",
      "id": "products_limit",
      "min": 3,
      "max": 48,
      "step": 3,
      "default": 12,
      "label": "Maximum products to show"
    },
    {
      "type": "checkbox",
      "id": "featured",
      "label": "Use featured layout",
      "default": false,
      "info": "Displays products in a featured layout instead of a grid"
    },
    {
      "type": "checkbox",
      "id": "show_buttons",
      "label": "Show action buttons",
      "default": true
    },
    {
      "type": "header",
      "content": "Filtering"
    },
    {
      "type": "text",
      "id": "tag_prefix",
      "label": "Tag prefix",
      "default": "flavor:",
      "info": "Only tags with this prefix will be used for filtering"
    },
    {
      "type": "text",
      "id": "search_placeholder",
      "label": "Search placeholder",
      "default": "Search flavors..."
    },
    {
      "type": "text",
      "id": "filter_button_text",
      "label": "Filter button text",
      "default": "Filter"
    },
    {
      "type": "text",
      "id": "filter_dropdown_title",
      "label": "Filter dropdown title",
      "default": "Categories"
    },
    {
      "type": "text",
      "id": "clear_filters_text",
      "label": "Clear filters text",
      "default": "Clear filters"
    },
    {
      "type": "header",
      "content": "No Results Message"
    },
    {
      "type": "text",
      "id": "no_results_heading",
      "label": "No results heading",
      "default": "No flavors found"
    },
    {
      "type": "text",
      "id": "no_results_text",
      "label": "No results text",
      "default": "Try adjusting your search or filters."
    }
  ],
  "presets": [
    {
      "name": "Flavor Grid",
      "category": "Product Grid",
      "settings": {
        "collection": "all",
        "products_limit": 12,
        "featured": false,
        "show_buttons": true
      }
    }
  ]
}
{% endschema %}

{% stylesheet %}
.flavor-grid-section {
  width: 100%;
}

.filter-container {
  margin-bottom: 2rem;
  display: flex;
  flex-direction: column;
}

@media (min-width: 640px) {
  .filter-container {
    flex-direction: row;
    gap: 1rem;
  }
}

.search-input {
  width: 100%;
  padding: 0.75rem 1rem 0.75rem 2.5rem;
  border: none;
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  border-radius: 9999px;
  background-color: #ffffff;
}

.search-icon {
  position: absolute;
  left: 0.75rem;
  top: 50%;
  transform: translateY(-50%);
  color: #6b7280;
}

.filter-button {
  display: flex;
  align-items: center;
  padding: 0.75rem 1rem;
  border: 1px solid #e5e7eb;
  border-radius: 9999px;
  background-color: #ffffff;
  font-weight: 500;
  transition: all 0.3s ease;
}

.filter-button:hover {
  border-color: var(--color-accent);
}

.filter-icon {
  margin-right: 0.5rem;
}

.filter-count {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  margin-left: 0.5rem;
  width: 1.5rem;
  height: 1.5rem;
  border-radius: 9999px;
  background-color: var(--color-accent);
  color: #ffffff;
  font-size: 0.75rem;
  font-weight: 600;
}

.filter-dropdown {
  position: absolute;
  z-index: 50;
  margin-top: 0.5rem;
  width: 14rem;
  right: 0;
  padding: 0.5rem;
  background-color: #ffffff;
  border-radius: 0.75rem;
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

.filter-dropdown-header {
  padding: 0.5rem;
  font-weight: 600;
}

.filter-dropdown-separator {
  height: 1px;
  margin: 0.25rem -0.5rem;
  background-color: #e5e7eb;
}

.filter-options {
  max-height: 12rem;
  overflow-y: auto;
  padding: 0.5rem 0;
}

.filter-checkbox-item {
  padding: 0.375rem 0.5rem;
}

.filter-checkbox-label {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
}

.filter-checkbox {
  cursor: pointer;
}

.clear-filters-button {
  width: 100%;
  padding: 0.5rem;
  text-align: center;
  color: #6b7280;
  font-size: 0.875rem;
  transition: color 0.3s ease;
}

.clear-filters-button:hover {
  color: var(--color-accent);
}

/* Product Grid Layouts */
.grid-layout {
  display: grid;
  grid-template-columns: repeat(1, minmax(0, 1fr));
  gap: 1.5rem;
}

@media (min-width: 640px) {
  .grid-layout {
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }
}

@media (min-width: 1024px) {
  .grid-layout {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
}

@media (min-width: 1280px) {
  .grid-layout {
    grid-template-columns: repeat(4, minmax(0, 1fr));
  }
}

.featured-layout {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

/* No Results */
.no-results {
  text-align: center;
  padding: 3rem 0;
}

.no-results h3 {
  font-family: var(--font-heading-family);
  font-size: 1.5rem;
  margin-bottom: 1rem;
}

.text-body-muted {
  color: #6b7280;
  margin-bottom: 1.5rem;
}
{% endstylesheet %}

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  const flavorGrid = document.querySelector('[data-flavor-grid]');
  if (!flavorGrid) return;
  
  const searchInput = flavorGrid.querySelector('[data-search-input]');
  const filterToggle = flavorGrid.querySelector('[data-filter-toggle]');
  const filterDropdown = flavorGrid.querySelector('[data-filter-dropdown]');
  const filterCount = flavorGrid.querySelector('[data-filter-count]');
  const filterCheckboxes = flavorGrid.querySelectorAll('[data-filter-checkbox]');
  const clearFiltersBtn = flavorGrid.querySelector('[data-clear-filters]');
  const clearFiltersAltBtn = flavorGrid.querySelector('[data-clear-filters-alt]');
  const productCards = flavorGrid.querySelectorAll('[data-product-card]');
  const productsContainer = flavorGrid.querySelector('[data-products-container]');
  const noResultsElement = flavorGrid.querySelector('[data-no-results]');
  
  let selectedCategories = [];
  let searchQuery = '';
  
  // Function to filter products
  function filterProducts() {
    let visibleProducts = 0;
    
    productCards.forEach(card => {
      const productTags = card.dataset.productTags.split(',').filter(tag => tag.trim() !== '');
      const productTitle = card.dataset.productTitle;
      const productDescription = card.dataset.productDescription;
      
      const matchesSearch = searchQuery === '' || 
                        productTitle.includes(searchQuery) || 
                        productDescription.includes(searchQuery);
      
      const matchesCategory = selectedCategories.length === 0 || 
                           selectedCategories.some(cat => productTags.includes(cat));
      
      if (matchesSearch && matchesCategory) {
        card.classList.remove('hidden');
        visibleProducts++;
      } else {
        card.classList.add('hidden');
      }
    });
    
    // Show/hide no results message
    if (visibleProducts === 0 && (searchQuery !== '' || selectedCategories.length > 0)) {
      if (noResultsElement) {
        noResultsElement.classList.remove('hidden');
      }
    } else {
      if (noResultsElement) {
        noResultsElement.classList.add('hidden');
      }
    }
    
    // Update filter count badge
    if (selectedCategories.length > 0) {
      filterCount.textContent = selectedCategories.length;
      filterCount.classList.remove('hidden');
    } else {
      filterCount.classList.add('hidden');
    }
  }
  
  // Event listeners
  if (searchInput) {
    searchInput.addEventListener('input', function() {
      searchQuery = this.value.toLowerCase().trim();
      filterProducts();
    });
  }
  
  if (filterToggle && filterDropdown) {
    // Toggle filter dropdown
    filterToggle.addEventListener('click', function(e) {
      e.stopPropagation();
      filterDropdown.classList.toggle('hidden');
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function(e) {
      if (!filterDropdown.contains(e.target) && e.target !== filterToggle) {
        filterDropdown.classList.add('hidden');
      }
    });
  }
  
  // Handle filter checkbox changes
  filterCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      const category = this.value;
      
      if (this.checked) {
        // Add category to selected filters
        if (!selectedCategories.includes(category)) {
          selectedCategories.push(category);
        }
      } else {
        // Remove category from selected filters
        selectedCategories = selectedCategories.filter(cat => cat !== category);
      }
      
      filterProducts();
    });
  });
  
  // Clear filters functionality
  function clearFilters() {
    selectedCategories = [];
    if (searchInput) {
      searchInput.value = '';
      searchQuery = '';
    }
    
    filterCheckboxes.forEach(checkbox => {
      checkbox.checked = false;
    });
    
    filterProducts();
    
    if (filterDropdown) {
      filterDropdown.classList.add('hidden');
    }
  }
  
  if (clearFiltersBtn) {
    clearFiltersBtn.addEventListener('click', clearFilters);
  }
  
  if (clearFiltersAltBtn) {
    clearFiltersAltBtn.addEventListener('click', clearFilters);
  }
  
  // Initial filtering
  filterProducts();
});
{% endjavascript %}
